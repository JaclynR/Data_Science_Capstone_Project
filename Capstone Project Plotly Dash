import pandas as pd
import plotly.express as px
import dash
from dash import html
from dash import dcc, Input, Output

spacex_df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv', encoding = "ISO-8859-1")

app = dash.Dash(__name__)

app.layout = html.Div(children = [
    html.H1(children = 'SpaceX Launch Records Dashboard', style = {
        'textAlign': 'center'}),
    dcc.Dropdown(id='site-dropdown',
        options=[
            {'label': 'All Sites', 'value': 'ALL'},
            {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
            {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
            {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
            {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
            ],
        value='ALL',
        placeholder="Select a launch site here",
        searchable=True
        ),
    dcc.Graph(id = 'success-pie-chart'),
    html.H1(children='Payload Range (kg)'),
    dcc.RangeSlider(id='payload-slider',
        min=0, max=10000, step=1000, marks={0: '0', 2500: '2500', 5000: '5000', 7500: '7500', 10000: '10000'}, 
        value=[spacex_df['Payload Mass (kg)'].min(), spacex_df['Payload Mass (kg)'].max()]),
    html.H1(children='Correlation between Payload and Success'),
    dcc.Graph(id = 'success-payload-scatter-chart')
    ])

# Function decorator to specify function input and output
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value'))

def get_pie_chart(entered_site):
    filtered_df = spacex_df
    if entered_site == 'ALL':
        fig = px.pie(filtered_df, values='class', 
        names='Launch Site', 
        title='Total Successful Launches by Site')
        return fig
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site].groupby(['Launch Site','class']).size().reset_index(name='class-count')
        fig = px.pie(filtered_df, values='class-count', 
        names='class', 
        title='Total Successful Launches for Site '+str(entered_site))
        return fig

@app.callback(
    Output(component_id = 'success-payload-scatter-chart', component_property = 'figure'),
    [Input(component_id = 'site-dropdown', component_property = 'value'),
    Input(component_id = 'payload-slider', component_property = 'value')])

def update_graph(entered_site, payload):
    filtered_df2 = spacex_df[spacex_df['Launch Site'] == entered_site]
    if entered_site == 'All Sites':
        fig = px.scatter(filtered_df2, x = "Payload Mass (kg)", y = "class", color = "Booster Version Category")
        return fig
    else:
        filtered_df3 = filtered_df2[filtered_df2['Launch Site'] == entered_site]
        fig = px.scatter(filtered_df3, x = "Payload Mass (kg)", y = "class", color = "Booster Version Category")
        return fig

if __name__ == "__main__":
    app.run_server(debug=True)


